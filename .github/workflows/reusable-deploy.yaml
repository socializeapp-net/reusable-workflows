# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        description: The name of the service to deploy to
        type: string
      dockerfile:
        required: false
        description: The path to the Dockerfile
        type: string
        default: ./Dockerfile
      subproject_name:
        required: false
        description: The name of the subproject to deploy from
        type: string
        default: ""
      cloud_run_flags:
        # https://cloud.google.com/sdk/gcloud/reference/run/deploy#FLAGS
        required: false
        description: The flags to pass to Cloud Run
        type: string
        default: '--cpu=1 --memory=512Mi --ingress=all --min-instances=0 --max-instances=1 --allow-unauthenticated --cpu-throttling'
      # rarely used in calling workflow
      _PROJECT_ID_DEV:
        required: false
        type: string
        default: 'socialize-2021'
      _BRANCH_NAME_DEV:
        required: false
        type: string
        default: 'dev'
      _PROJECT_ID_PROD:
        required: false
        type: string
        default: 'socializeapp-prod'
      _BRANCH_NAME_PROD:
        required: false
        type: string
        default: 'main'
      _PROJECT_ID_ELSE:
        required: false
        type: string
        default: 'socialize-2021'
      _BRANCH_NAME_ELSE:
        required: false
        type: string
        default: 'experimental'
      GAR_LOCATION:
        required: false
        type: string
        default: 'europe-west4'
      REGION:
        required: false
        type: string
        default: 'europe-west4'

env:
  # Google Cloud PROJECT_ID with branches
  _PROJECT_ID_DEV: ${{ inputs._PROJECT_ID_DEV }}
  _BRANCH_NAME_DEV: ${{ inputs._BRANCH_NAME_DEV }}
  _PROJECT_ID_PROD: ${{ inputs._PROJECT_ID_PROD }}
  _BRANCH_NAME_PROD: ${{ inputs._BRANCH_NAME_PROD }}
  _PROJECT_ID_ELSE: ${{ inputs._PROJECT_ID_ELSE }}
  _BRANCH_NAME_ELSE: ${{ inputs._BRANCH_NAME_ELSE }}
  GAR_LOCATION: ${{ inputs.GAR_LOCATION }} # Artifact Registry location
  _SERVICE_BASE: ${{ inputs.service_name }} # update Cloud Run service name
  REGION: ${{ inputs.REGION }} # Cloud Run service region

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'read'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # could be summarized with env and contains
      - name: Extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Current Branch Env
        run: echo "CURRENT_BRANCH=${{ steps.extract_branch.outputs.branch }}" >> $GITHUB_ENV

      # Branch Routing
      - name: Branch Routing Dev
        if: ${{ contains(env.CURRENT_BRANCH, env._BRANCH_NAME_DEV) }}
        run: |
          echo "PROJECT_ID=${{ env._PROJECT_ID_DEV }}" >> $GITHUB_ENV
          echo "_SERVICE_APX=""" >> $GITHUB_ENV
      - name: Branch Routing Prod
        if: ${{ contains(env.CURRENT_BRANCH, env._BRANCH_NAME_PROD) }}
        run: |
          echo "PROJECT_ID=${{ env._PROJECT_ID_PROD }}" >> $GITHUB_ENV
          echo "_SERVICE_APX=""" >> $GITHUB_ENV
      - name: Branch Routing Else
        if: ${{ contains(env.CURRENT_BRANCH, env._BRANCH_NAME_ELSE) }}
        run: |
          echo "PROJECT_ID=${{ env._PROJECT_ID_ELSE }}" >> $GITHUB_ENV
          echo "_SERVICE_APX="-${{ env._BRANCH_NAME_ELSE }}"" >> $GITHUB_ENV
      - name: Branch Routing Finalize
        run: echo "SERVICE="${{ env._SERVICE_BASE }}${{ env._SERVICE_APX }}"" >> $GITHUB_ENV


      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth Dev
        id: auth_dev
        if: ${{ contains(env.CURRENT_BRANCH, env._BRANCH_NAME_DEV) || contains(env.CURRENT_BRANCH, env._BRANCH_NAME_ELSE) }}
        # with:
        #   credentials_json: "${{ secrets.GAR_JSON_KEY_DEV }}"
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER_DEV }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT_DEV }}'
      - name: Google Auth Prod
        id: auth_prod
        if: ${{ contains(env.CURRENT_BRANCH, env._BRANCH_NAME_PROD) }}
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER_PROD }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT_PROD }}'





      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth Dev
        id: docker-auth_dev
        if: ${{ contains(env.CURRENT_BRANCH, env._BRANCH_NAME_DEV) || contains(env.CURRENT_BRANCH, env._BRANCH_NAME_ELSE) }}
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth_dev.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
      - name: Docker Auth Prod
        id: docker-auth_prod
        if: ${{ contains(env.CURRENT_BRANCH, env._BRANCH_NAME_PROD) }}
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth_prod.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'


      - name: Set Image Name
        run: echo "IMAGE_NAME="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/image-${{ env.SERVICE }}:${{ github.sha }}"" >> $GITHUB_ENV

      - name: Check for Artifact Repository
        run: echo "REPO_EXISTS=$(gcloud --project=${{ env.PROJECT_ID }} artifacts repositories list --location=${{ env.GAR_LOCATION }} | grep "${{ env.SERVICE }} " )" >> $GITHUB_ENV

      - name: Create Artifact Repository
        if: ${{ env.REPO_EXISTS == '' }} 
        run: gcloud --project=${{ env.PROJECT_ID }} --quiet artifacts repositories create ${{ env.SERVICE }} --location=${{ env.GAR_LOCATION }} --repository-format=docker



      - name: Build and Push Container
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            "SUBPROJ=${{ inputs.subproject_name }}"
            "GITHUB_TOKEN=${{ secrets.SOCIALIZE_PACKAGE_PAT }}"
            "GITHUB_USERNAME=${{ github.actor }}"
          # secrets: |
          #     "GITHUB_TOKEN=${{ secrets.SOCIALIZE_PACKAGE_PAT }}"
          #     "GITHUB_USERNAME=${{ github.actor }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.IMAGE_NAME }}
          flags: ${{ inputs.cloud_run_flags }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
